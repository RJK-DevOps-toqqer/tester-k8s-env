apiVersion: v1
kind: Namespace
metadata:
  name: toqqer-dev
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ingress-nginx
  namespace: toqqer-dev
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ingress-nginx-admission
  namespace: toqqer-dev
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/part-of: ingress-nginx

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ingress-nginx
  namespace: toqqer-dev
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
rules:
- apiGroups: [""]
  resources: [namespaces, configmaps, pods, secrets, endpoints, services, events]
  verbs: [get, list, watch, create, patch, update]
- apiGroups: ["networking.k8s.io"]
  resources: [ingresses, ingresses/status, ingressclasses]
  verbs: [get, list, watch, update]
- apiGroups: ["coordination.k8s.io"]
  resources: [leases]
  verbs: [get, list, watch, create, update]
- resourceNames: [ingress-controller-leader]
  apiGroups: [""]
  resources: [configmaps]
  verbs: [get, update]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ingress-nginx-admission
  namespace: toqqer-dev
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/part-of: ingress-nginx
rules:
- apiGroups: [""]
  resources: [secrets]
  verbs: [get, create]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
rules:
- apiGroups: [""]
  resources: [configmaps, endpoints, nodes, pods, secrets, namespaces, services, events]
  verbs: [list, watch, get, create, patch, update]
- apiGroups: ["coordination.k8s.io"]
  resources: [leases]
  verbs: [list, watch, get, create, update]
- apiGroups: ["networking.k8s.io"]
  resources: [ingresses, ingresses/status, ingressclasses]
  verbs: [get, list, watch, update]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ingress-nginx-admission
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/part-of: ingress-nginx
rules:
- apiGroups: ["admissionregistration.k8s.io"]
  resources: [validatingwebhookconfigurations]
  verbs: [get, update]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ingress-nginx
  namespace: toqqer-dev
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ingress-nginx
subjects:
- kind: ServiceAccount
  name: ingress-nginx
  namespace: toqqer-dev

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ingress-nginx-admission
  namespace: toqqer-dev
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/part-of: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ingress-nginx-admission
subjects:
- kind: ServiceAccount
  name: ingress-nginx-admission
  namespace: toqqer-dev

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ingress-nginx
subjects:
- kind: ServiceAccount
  name: ingress-nginx
  namespace: toqqer-dev

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ingress-nginx-admission
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/part-of: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ingress-nginx-admission
subjects:
- kind: ServiceAccount
  name: ingress-nginx-admission
  namespace: toqqer-dev

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ingress-nginx-controller
  namespace: toqqer-dev
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
data:
  enable-vts-status: "false"
  proxy-connect-timeout: "30"
  proxy-read-timeout: "60"
  proxy-send-timeout: "60"
  use-proxy-protocol: "false"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-nginx-controller
  namespace: toqqer-dev
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
    spec:
      serviceAccountName: ingress-nginx
      terminationGracePeriodSeconds: 300
      containers:
      - name: controller
        image: registry.k8s.io/ingress-nginx/controller:v1.9.5
        args:
        - /nginx-ingress-controller
        - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
        - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
        - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
        - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
        - --annotations-prefix=nginx.ingress.kubernetes.io
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 3
        resources:
          limits:
            cpu: 1000m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 256Mi

---
apiVersion: v1
kind: Service
metadata:
  name: ingress-nginx-controller
  namespace: toqqer-dev
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  - port: 443
    targetPort: 443
    protocol: TCP
    name: https
  selector:
    app.kubernetes.io/name: ingress-nginx

---
# ValidatingWebhookConfiguration must exist before the patch job tries to modify it.
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: ingress-nginx-admission
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/component: admission-webhook
webhooks:
- name: admission.ingress-nginx.kubernetes.io
  clientConfig:
    service:
      name: ingress-nginx-admission
      namespace: toqqer-dev
      path: "/validate"
      port: 443
    # caBundle will be patched by the ingress-nginx-admission-patch job
    caBundle: ""
  rules:
  - operations: ["CREATE", "UPDATE"]
    apiGroups: ["networking.k8s.io"]
    apiVersions: ["v1"]
    resources: ["ingresses"]
  failurePolicy: Fail
  admissionReviewVersions: ["v1"]
  sideEffects: None

---
# This Job creates the certificates. It must run before the patch job.
apiVersion: batch/v1
kind: Job
metadata:
  name: ingress-nginx-admission-create
  namespace: toqqer-dev
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/component: admission-webhook
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/component: admission-webhook
    spec:
      serviceAccountName: ingress-nginx-admission
      containers:
      - name: create
        image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v20231011
        imagePullPolicy: IfNotPresent
        command:
        - /bin/sh
        - -c
        - >
          mkdir -p /certs &&
          /usr/local/bin/kube-webhook-certgen create --host ingress-nginx-admission.toqqer-dev.svc --cert-dir /certs &&
          # Copy only ca.crt to a location accessible by the next job/script
          cp /certs/ca.crt /var/run/secrets/kubernetes.io/serviceaccount/ca.crt.out
        volumeMounts:
        - name: webhook-certs
          mountPath: /certs
        # Mount service account token to allow writing to this path
        - name: service-account-token
          mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          readOnly: false
      restartPolicy: OnFailure
      volumes:
      - name: webhook-certs
        emptyDir: {}
      - name: service-account-token
        projected:
          sources:
          - serviceAccountToken:
              path: token
              expirationSeconds: 3600
              audience: api

---
# This Job patches the ValidatingWebhookConfiguration. It depends on the create job having run.
apiVersion: batch/v1
kind: Job
metadata:
  name: ingress-nginx-admission-patch
  namespace: toqqer-dev
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/component: admission-webhook
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/component: admission-webhook
    spec:
      serviceAccountName: ingress-nginx-admission
      containers:
      - name: patch
        image: bitnami/kubectl:1.29.0 # Use a kubectl image or any image with `curl` and `jq`
        imagePullPolicy: IfNotPresent
        env:
        - name: NAMESPACE
          value: toqqer-dev
        command:
        - /bin/sh
        - -c
        - >
          # Attempt to read ca.crt.out; loop if not found (due to create job not finished yet)
          MAX_RETRIES=60 # Roughly 1 minute at 1 second intervals
          RETRY_COUNT=0
          while [ ! -f /var/run/secrets/kubernetes.io/serviceaccount/ca.crt.out ] && [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Waiting for ca.crt.out to be created by ingress-nginx-admission-create job (attempt $((RETRY_COUNT+1))/$MAX_RETRIES)..."
            sleep 1
            RETRY_COUNT=$((RETRY_COUNT+1))
          done
          if [ ! -f /var/run/secrets/kubernetes.io/serviceaccount/ca.crt.out ]; then
            echo "Error: ca.crt.out not found after maximum retries. Exiting."
            exit 1
          fi
          CA_BUNDLE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt.out | base64 -w0) &&
          # Patch the ValidatingWebhookConfiguration with the dynamically generated caBundle
          kubectl patch validatingwebhookconfiguration ingress-nginx-admission --type='json' -p="[{\"op\": \"replace\", \"path\": \"/webhooks/0/clientConfig/caBundle\", \"value\":\"${CA_BUNDLE}\"}]"
        volumeMounts:
        - name: service-account-token
          mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          readOnly: false
      restartPolicy: OnFailure
      volumes:
      - name: service-account-token
        projected:
          sources:
          - serviceAccountToken:
              path: token
              expirationSeconds: 3600
              audience: api
  backoffLimit: 5 # This backoff is for the Job itself if the patch command fails, not for the internal wait.

